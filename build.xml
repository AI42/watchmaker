<!-- =========================================================================
  Copyright 2006 Daniel W. Dyer

  Licensed under the Apache License, Version 2.0 (the "License");
  you may notP use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
========================================================================== -->
<project name="watchmaker" default="dist" basedir=".">
  <description>Ant build file for the Watchmaker framework.</description>

  
<!-- ==================================================================
     GLOBAL BUILD PROPERTIES
=================================================================== -->

  <!-- Project-global locations. -->
  <property name="conf.dir" location="./etc" />
  <property name="lib.dir" location="./lib" />
  <property name="lib.compiletime" location="${lib.dir}/compiletime" />
  <property name="lib.runtime" location="${lib.dir}/runtime" />
  <property name="dist.dir" location="./dist" />
  <property name="docs.dir" location="./docs" />
  <property name="api.dir" location="${docs.dir}/api" />
  <property name="test-results.dir" location="${docs.dir}/test-results" />
  <property name="checkstyle-results.dir" location="${docs.dir}/checkstyle-results" />
  <property name="release.dir" location="./release" />
  <property name="web.dir" location="./www" />

  <!-- Per-module locations. -->
  <property name="src.dir" value="src" />
  <property name="java.dir" value="${src.dir}/java" />
  <property name="build.dir" value="build"/>
  <property name="classes.dir" value="${build.dir}/classes" />

  <!-- Classpath for compilation and tests. -->
  <path id="base.path">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <property name="version" value="0.3.0"/>


<!-- ==================================================================
     MACROS
=================================================================== -->

  <!-- This macro deletes all build artifacts from a module. -->
  <macrodef name="clean.module">
    <attribute name="module.name"/>
    <sequential>
      <delete dir="./@{module.name}/${build.dir}"/>
    </sequential>
  </macrodef>

  <!-- This macro compiles one source group (i.e. the main source tree
       or the unit test source tree) of a given module. -->
  <macrodef name="compile.src.group">
    <attribute name="module.name"/>
    <attribute name="src.group"/>
    <element name="groupclasspath" optional="true"/>
    <sequential>
      <mkdir dir="./@{module.name}/${classes.dir}/@{src.group}" />
      <javac destdir="./@{module.name}/${classes.dir}/@{src.group}"
             debug="on"
             deprecation="on"
             optimize="on"
             source="1.5"
             target="1.5"
             srcdir="./@{module.name}/${java.dir}/@{src.group}">
        <classpath>
          <groupclasspath/>
          <path refid="base.path"/>
        </classpath>
        <compilerarg value="-Xlint:unchecked" />
      </javac>
    </sequential>
  </macrodef>

  <!-- This macro compiles all source (including unit tests) for a
       single module.  -->
  <macrodef name="compile.module">
    <attribute name="module.name"/>
    <element name="moduleclasspath" optional="true"/>
    <sequential>
      <compile.src.group module.name="@{module.name}" src.group="main">
        <groupclasspath>
          <moduleclasspath />
        </groupclasspath>
      </compile.src.group>
      <compile.src.group module.name="@{module.name}" src.group="test">
        <groupclasspath>
          <!-- Add the main classes to the classpath for unit test compilation. -->
          <path location="./@{module.name}/${classes.dir}/main" />
          <moduleclasspath />
        </groupclasspath>
      </compile.src.group>
    </sequential>
  </macrodef>

  <!-- This macro builds a JAR file for a module, containing all of
       the classes in the main source group for the module
       (i.e. unit test classes are excluded).  The JAR file name is
       derived from the module name. -->
  <macrodef name="jar.module">
    <attribute name="module.name"/>
    <attribute name="jar.name" default="@{module.name}.jar"/>
    <element name="additionalcontents" optional="true"/>
    <sequential>
      <jar destfile="./@{module.name}/${build.dir}/@{jar.name}">
        <fileset dir="./@{module.name}/${classes.dir}/main"/>
        <additionalcontents/>
      </jar>
    </sequential>
  </macrodef>


  <!-- Generates API documentation for all modules. -->
  <macrodef name="api.docs">
    <attribute name="api.dir"/>
    <sequential>
      <mkdir dir="@{api.dir}"/>
      <javadoc destdir="@{api.dir}"
               doctitle="The Watchmaker Framework for Evolutionary Algorithms ${version}"
               windowtitle="Watchmaker Framework API">
        <fileset dir="." defaultexcludes="yes">
          <include name="**/${java.dir}/main/org/uncommons/**/*.java"/>
        </fileset>
        <group title="Evolution Framework" packages="org.uncommons.watchmaker.framework:org.uncommons.watchmaker.framework.*"/>
        <group title="Example Evolutionary Algorithms" packages="org.uncommons.watchmaker.examples.*"/>
        <group title="Uncommons Maths" packages="org.uncommons.maths:org.uncommons.maths.*"/>
        <group title="Uncommons GUI" packages="org.uncommons.gui:org.uncommons.gui.*"/>
        <header><![CDATA[Watchmaker Framework API<br><small>(Version ${version})</small>]]></header>
        <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
      </javadoc>
    </sequential>
  </macrodef>


<!-- ==================================================================
     TARGETS FOR BUILDING THE SOFTWARE
=================================================================== -->

  <!-- Builds everything from scratch. -->
  <target name="all"
          depends="clean, test"
          description="Builds everything, excluding docs, from scratch."/>
  
  
  <!-- Deletes all directories and files created by the build process. -->
  <target name="clean"
          description="Remove all files created by the build process." >
    <delete dir="${docs.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${release.dir}" />
    <clean.module module.name="examples" />
    <clean.module module.name="framework" />
    <clean.module module.name="maths" />
  </target>    
  

  <!-- Builds the maths module. -->
  <target name="maths"
          description="Build the maths module.">
    <compile.module module.name="maths" />
    <jar.module module.name="maths" jar.name="uncommons-maths.jar"/>
  </target>


  <!-- Builds the framework JAR, which depends on the maths module. -->
  <target name="framework"
          depends="maths"
          description="Build the framework module.">
    <compile.module module.name="framework">
      <moduleclasspath>
        <path location="./maths/${build.dir}/uncommons-maths.jar" />
      </moduleclasspath>
    </compile.module>
    <jar.module module.name="framework" jar.name="watchmaker-framework.jar">
      <additionalcontents>
        <manifest>
          <attribute name="Class-Path" value="uncommons-maths.jar"/>
        </manifest>
      </additionalcontents>
    </jar.module>
  </target>


  <!-- Builds the GUI module. -->
  <target name="gui"
          description="Build the GUI module.">
    <compile.module module.name="gui" />
    <jar.module module.name="gui" jar.name="uncommons-gui.jar"/>
  </target>


  <!-- Builds the examples JAR, which depends on each of the other modules. -->
  <target name="examples"
          depends="framework, gui"
          description="Build the examples.">
    <compile.module module.name="examples">
      <moduleclasspath>
        <path location="./framework/${build.dir}/watchmaker-framework.jar" />
        <path location="./maths/${build.dir}/uncommons-maths.jar" />
        <path location="./gui/${build.dir}/uncommons-gui.jar" />
      </moduleclasspath>
    </compile.module>
    <jar.module module.name="examples" jar.name="watchmaker-examples.jar">
      <additionalcontents>
        <manifest>
          <attribute name="Class-Path" value="watchmaker-framework.jar uncommons-maths.jar uncommons-gui.jar"/>
        </manifest>
      </additionalcontents>
    </jar.module>
  </target>


  <!-- Copy all necessary files to distribution directory. -->
  <target name="dist"
          depends="maths, framework, gui, examples"
          description="Generate the project distribution." >
    <mkdir dir="${dist.dir}" />
    <!-- Copy all application JARs and 3rd party libraries. -->
    <copy todir="${dist.dir}" flatten="true">
      <fileset dir="." includes="**/${build.dir}/*.jar" />
      <fileset dir="." includes="${lib.runtime}/*.jar" />
    </copy>
  </target>


  <!-- Create the release artifacts. -->
  <target name="release"
          depends="clean, dist, test, docs"
          description="Creates the release archives.">
    <mkdir dir="${release.dir}" />
    <!-- Create a GZipped TAR file containing the built binaries and the API
         documentation -->
    <tar destfile="${release.dir}/watchmaker-framework-${version}.tgz"
         compression="gzip"
         longfile="gnu">
      <tarfileset dir="${dist.dir}" prefix="watchmaker-framework-${version}">
        <include name="**/*" />
      </tarfileset>
      <tarfileset dir="${api.dir}" prefix="watchmaker-framework-${version}/docs/api">
        <include name="**/*" />
      </tarfileset>
      <!-- Don't forget to include the licence and other important information. -->
      <tarfileset dir="." prefix="watchmaker-framework-${version}">
        <include name="*.txt" />
      </tarfileset>
    </tar>
    <!-- Also create a zip file release for the convenience of Windows users. -->
    <zip destfile="${release.dir}/watchmaker-framework-${version}.zip">
      <zipfileset dir="${dist.dir}" prefix="watchmaker-framework-${version}">
        <include name="**/*" />
      </zipfileset>
      <zipfileset dir="${api.dir}" prefix="watchmaker-framework-${version}/docs/api">
        <include name="**/*" />
      </zipfileset>
      <!-- Don't forget to include the licence and other important information. -->
      <zipfileset dir="." prefix="watchmaker-framework-${version}">
        <include name="*.txt" />
      </zipfileset>
    </zip>
  </target>


<!-- ==================================================================
      TARGETS FOR GENERATING TEST REPORTS & DOCUMENTATION
 =================================================================== -->

  <!-- Runs unit tests for all modules. -->
  <target name="test"
          depends="dist"
          description="Run the unit test suite.">
    <mkdir dir="${test-results.dir}" />
    <path id="test.path">
      <dirset dir=".">
        <include name="**/${classes.dir}/test" />
      </dirset>
      <fileset dir="${dist.dir}" includes="*.jar"/>
      <path refid="base.path" />
    </path>
    <taskdef resource="testngtasks" classpathref="test.path"/>
    <testng classpathref="test.path"
            outputdir="${test-results.dir}"
            haltonfailure="true"
            useDefaultListeners="false"
            listeners="org.uncommons.reportng.HTMLReporter">
      <xmlfileset dir="${conf.dir}" includes="testng.xml"/>
    </testng>
  </target>


  <target name="checkstyle"
          description="Check that coding standard are adhered to.">
    <taskdef resource="checkstyletask.properties" classpathref="base.path"/>
    <mkdir dir="${checkstyle-results.dir}" />
    <checkstyle config="${conf.dir}/checks.xml"
                failonviolation="false">
      <fileset dir="." defaultexcludes="yes">
        <include name="**/${java.dir}/main/org/uncommons/**/*.java"/>
      </fileset>
      <formatter type="xml" tofile="${checkstyle-results.dir}/checkstyle_report.xml"/>
    </checkstyle>
    <xslt in="${checkstyle-results.dir}/checkstyle_report.xml"
          out="${checkstyle-results.dir}/checkstyle_report.html"
          style="${conf.dir}/checkstyle-noframes-sorted.xsl"/>
  </target>


  <!-- Generates API documentation for all modules. -->
  <target name="docs"
          description="Generates Javadoc API documentation for all modules.">
    <api.docs api.dir="${api.dir}" />
  </target>


<!-- ==================================================================
      TARGETS FOR UPDATING THE PROJECT WEBSITE
 =================================================================== -->

  <!-- Refresh the API documentation tree for the Watchmaker Framework website. -->
  <target name="website-docs"
          description="Re-builds the website Javadocs.">
    <!-- Delete all existing HTML files and then regenerate the docs over the top. -->
    <delete>
      <fileset dir="${web.dir}/api">
        <include name="**/*.html" />
      </fileset>
    </delete>
    <api.docs api.dir="${web.dir}/api" />
    <copy todir="${web.dir}" file="./CHANGELOG.txt" />
  </target>

</project>
