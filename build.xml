<!-- =========================================================================
  Copyright 2006, 2007, 2008 Daniel W. Dyer

  Licensed under the Apache License, Version 2.0 (the "License");
  you may notP use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
========================================================================== -->
<project name="watchmaker"
         xmlns:uncommons="antlib:org.uncommons.antlib"
         default="dist"
         basedir=".">
  <description>Ant build file for the Watchmaker framework.</description>

  
<!-- ==================================================================
     GLOBAL BUILD PROPERTIES
=================================================================== -->

  <!-- Project-global locations. -->
  <property name="conf.dir" value="etc" />
  <property name="lib.dir" value="lib" />
  <property name="lib.compiletime" value="${lib.dir}/compiletime" />
  <property name="lib.runtime" value="${lib.dir}/runtime" />
  <property name="dist.dir" value="dist" />
  <property name="docs.dir" value="docs" />
  <property name="api.dir" value="${docs.dir}/api" />
  <property name="coverage.dir" value="${docs.dir}/coverage" />
  <property name="test-results.dir" value="${docs.dir}/test-results" />
  <property name="checkstyle-results.dir" value="${docs.dir}/checkstyle" />
  <property name="release.dir" value="release" />
  <property name="web.dir" value="www" />
  <property name="temp.dir" value="temp" />

  <!-- Per-module locations. -->
  <property name="src.dir" value="src" />
  <property name="java.dir" value="${src.dir}/java" />
  <property name="build.dir" value="build"/>
  <property name="classes.dir" value="${build.dir}/classes" />


  <!-- Classpath for compilation and tests. -->
  <path id="base.path">
    <fileset dir="${lib.dir}" includes="**/*.jar" />
  </path>

  <taskdef uri="antlib:org.uncommons.antlib"
           resource="org/uncommons/antlib/antlib.xml"
           classpathref="base.path"/>  


  <property name="version" value="0.6.0pre"/>
  <property name="artifact.identifier" value="watchmaker-framework-${version}"/>

  <!-- This is the minimum coverage percentage (for both lines and
       branches) that will be tolerated.  This is used to prevent
       regressions in coverage.  The threshold will be raised as
       test coverage improves. -->
  <property name="minimum.coverage" value="61" />


<!-- ==================================================================
     MACROS
=================================================================== -->

  <!-- Generates API documentation for all modules. -->
  <macrodef name="api.docs">
    <attribute name="api.dir"/>
    <sequential>
      <mkdir dir="@{api.dir}"/>
      <javadoc destdir="@{api.dir}"
               doctitle="The Watchmaker Framework for Evolutionary Computation ${version}"
               windowtitle="Watchmaker Framework API"
               classpathref="base.path">
        <fileset dir="." defaultexcludes="yes">
          <include name="**/${java.dir}/main/**/*.java"/>
          <exclude name="examples/**/*"/>
        </fileset>
        <group title="Watchmaker Evolution Framework" packages="org.uncommons.watchmaker.framework:org.uncommons.watchmaker.framework.*"/>
        <group title="Watchmaker Swing Classes" packages="org.uncommons.swing:org.uncommons.swing.*:org.uncommons.watchmaker.swing:org.uncommons.watchmaker.swing.*"/>
        <group title="Uncommons Utilities" packages="org.uncommons.util:org.uncommons.util.*"/>
        <header><![CDATA[Watchmaker Framework API<br><small>(Version ${version})</small>]]></header>
        <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        <link href="https://uncommons-maths.dev.java.net/nonav/api/"/>
      </javadoc>
    </sequential>
  </macrodef>


<!-- ==================================================================
     TARGETS FOR BUILDING THE SOFTWARE
=================================================================== -->

  <!-- Builds everything from scratch. -->
  <target name="all"
          depends="clean, dist, test, docs"
          description="Builds everything, excluding docs, from scratch."/>
  
  
  <!-- Deletes all directories and files created by the build process. -->
  <target name="clean"
          description="Remove all files created by the build process." >
    <delete dir="${docs.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${release.dir}" />
    <delete dir="${temp.dir}" />
    <uncommons:clean module="examples" />
    <uncommons:clean module="framework" />
    <uncommons:clean module="swing" />
    <uncommons:clean module="book" />
  </target>


  <!-- Builds the framework JAR, which depends on the maths module. -->
  <target name="framework"
          description="Build the framework module.">
    <uncommons:compile module="framework" />
    <uncommons:jar module="framework"
                   jarfile="${artifact.identifier}.jar"
                   classpath="uncommons-maths-1.2.jar google-collect-snapshot-20090211.jar" />
  </target>


  <!-- Builds the GUI module. -->
  <target name="swing"
          depends="framework"
          description="Build the GUI module.">
    <uncommons:compile module="swing" />
    <uncommons:jar module="swing"
                   jarfile="watchmaker-swing-${version}.jar"
                   classpath="${artifact.identifier}.jar uncommons-maths-1.2.jar jfreechart-1.0.12.jar jcommon-1.0.15.jar" />
  </target>


  <!-- Builds the examples JAR, which depends on each of the other modules. -->
  <target name="examples"
          depends="framework, swing"
          description="Build the examples.">
    <uncommons:compile module="examples" />
    <uncommons:jar module="examples"
                   jarfile="watchmaker-examples-${version}.jar"
                   classpath="${artifact.identifier}.jar uncommons-maths-1.2.jar watchmaker-swing-${version}.jar">
      <additionalcontents>
        <fileset dir="${modules.dir}/examples/resources" includes="**/*" />
      </additionalcontents>
    </uncommons:jar>
  </target>


  <!-- Copy all necessary files to distribution directory. -->
  <target name="dist"
          depends="framework, swing, examples"
          description="Generate the project distribution." >
    <mkdir dir="${dist.dir}" />
    <!-- Copy all application JARs and 3rd party libraries. -->
    <copy todir="${dist.dir}" flatten="true">
      <fileset dir="." includes="**/${build.dir}/*.jar" />
      <fileset dir="${lib.runtime}" includes="*.jar" />
    </copy>
  </target>


  <!-- Create the release artifacts. -->
  <target name="release"
          depends="clean, dist, test, checkstyle, docs"
          description="Creates the release archives.">
    <mkdir dir="${release.dir}" />
    <!-- Create a GZipped TAR file containing the built binaries, the API
         documentation, and source code for the examples. -->
    <tar destfile="${release.dir}/${artifact.identifier}.tgz"
         compression="gzip"
         longfile="gnu">
      <tarfileset dir="${dist.dir}"
                  prefix="${artifact.identifier}"
                  includes="**/*" />
      <tarfileset dir="${api.dir}"
                  prefix="${artifact.identifier}/docs/api"
                  includes="**/*" />
      <tarfileset dir="examples/${java.dir}/main"
                  prefix="${artifact.identifier}/examples/src"
                  includes="**/*" />
      <!-- Don't forget to include the licence and other important information. -->
      <tarfileset dir="."
                  prefix="${artifact.identifier}"
                  includes="*.txt" />
      <tarfileset dir="${lib.runtime}"
                  prefix="${artifact.identifier}"
                  includes="*.txt" />
    </tar>
    <!-- Also create a zip file release for the convenience of Windows users. -->
    <zip destfile="${release.dir}/${artifact.identifier}.zip">
      <zipfileset dir="${dist.dir}"
                  prefix="${artifact.identifier}"
                  includes="**/*" />
      <zipfileset dir="${api.dir}"
                  prefix="${artifact.identifier}/docs/api"
                  includes="**/*" />
      <zipfileset dir="examples/${java.dir}/main"
                  prefix="${artifact.identifier}/examples/src"
                  includes="**/*" />
      <!-- Don't forget to include the licence and other important information. -->
      <zipfileset dir="."
                  prefix="${artifact.identifier}"
                  includes="*.txt" />
      <zipfileset dir="${lib.runtime}"
                  prefix="${artifact.identifier}"
                  includes="*.txt" />
    </zip>
  </target>


<!-- ==================================================================
      TARGETS FOR GENERATING TEST REPORTS & DOCUMENTATION
 =================================================================== -->

  <!-- Runs unit tests for all modules. -->
  <target name="test"
          depends="dist"
          description="Run the unit test suite.">
    <!-- Don't run FEST tests in a headless environment (they will fail) -->
    <condition property="tests.file" value="testng-headless.xml" else="testng.xml">
      <isset property="headless" />
    </condition>
    <uncommons:test suites="${conf.dir}/${tests.file}"
                    headless="${headless}"
                    title="Watchmaker Framework Unit Test Report"
                    mincoverage="${minimum.coverage}" />
  </target>


  <target name="checkstyle"
          depends="dist"
          description="Check that coding standard are adhered to.">
    <taskdef resource="checkstyletask.properties" classpathref="base.path"/>
    <mkdir dir="${checkstyle-results.dir}" />

    <!-- Compiled classes must be available on the classpath to work-around this
         bug (http://jira.codehaus.org/browse/MPCHECKSTYLE-20).  That is why this
         target depends on the 'dist' target. -->
    <path id="checkstyle.path">
      <fileset dir="${dist.dir}" includes="**/*.jar" />
    </path>

    <checkstyle config="${conf.dir}/checks.xml"
                failonviolation="false"
                classpathref="checkstyle.path">
      <fileset dir="." defaultexcludes="yes">
        <include name="**/${java.dir}/main/org/uncommons/**/*.java"/>
      </fileset>
      <formatter type="xml" tofile="${checkstyle-results.dir}/checkstyle_report.xml"/>
    </checkstyle>
    <xslt in="${checkstyle-results.dir}/checkstyle_report.xml"
          out="${checkstyle-results.dir}/checkstyle_report.html"
          style="${conf.dir}/checkstyle-noframes-sorted.xsl" />
  </target>


  <!-- Generates API documentation for all modules. -->
  <target name="docs"
          description="Generates Javadoc API documentation for all modules.">
    <api.docs api.dir="${api.dir}" />
  </target>

  
  <target name="book" description="Generates the PDF user guide.">
    <mkdir dir="book/${build.dir}" />
    <uncommons:docbook classpathref="base.path"
                       source="book/${src.dir}/xml/book.xml"
                       format="pdf"                       
                       outputDir="book/${build.dir}" >
      <parameter name="paper.type" value="A4" />
      <parameter name="highlight.source" value="1" />
      <parameter name="img.src.path" value="./book/src/images/" />
    </uncommons:docbook>
  </target>


<!-- ==================================================================
      TARGETS FOR UPDATING THE PROJECT WEBSITE
 =================================================================== -->

  <target name="website-docs"
          description="Re-builds the website Javadocs."
          depends="dist">
    <!-- Delete all existing HTML files and then regenerate the docs over the top. -->
    <delete>
      <fileset dir="${web.dir}">
        <include name="api/**/*.html" />
        <include name="manual/**/*" />
      </fileset>
    </delete>

    <!-- Refresh the API documentation tree for the Watchmaker Framework website. -->
    <api.docs api.dir="${web.dir}/api" />

    <copy todir="${web.dir}" file="./CHANGELOG.txt" />

    <!-- Copy latest jars into website examples directory. -->
    <copy todir="${web.dir}/examples">
      <fileset dir="${dist.dir}" includes="*.jar" />
      <filterset>
        <filter token="VERSION" value="${version}"/>
      </filterset>
    </copy>

    <!-- Generate user manual from DocBook source. -->
    <uncommons:docbook classpathref="base.path"
                       source="book/${src.dir}/xml/website.xml"
                       format="html"
                       chunked="true"
                       outputDir="${web.dir}/manual" >
      <parameter name="highlight.source" value="1" />
      <parameter name="img.src.path" value="./" />
    </uncommons:docbook>
    <copy todir="${web.dir}/manual">
      <fileset dir="book/${src.dir}/images" includes="**/*"/>
    </copy>
  </target>

</project>
